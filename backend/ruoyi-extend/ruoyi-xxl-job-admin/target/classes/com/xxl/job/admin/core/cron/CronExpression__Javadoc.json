{"doc":"\n Provides a parser and evaluator for unix-like cron expressions. Cron\r\n expressions provide the ability to specify complex time combinations such as\r\n &quot;At 8:00am every Monday through Friday&quot; or &quot;At 1:30am every\r\n last Friday of the month&quot;.\r\n <P>\r\n Cron expressions are comprised of 6 required fields and one optional field\r\n separated by white space. The fields respectively are described as follows:\r\n\r\n <table cellspacing=\"8\">\r\n <tr>\r\n <th align=\"left\">Field Name</th>\r\n <th align=\"left\">&nbsp;</th>\r\n <th align=\"left\">Allowed Values</th>\r\n <th align=\"left\">&nbsp;</th>\r\n <th align=\"left\">Allowed Special Characters</th>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Seconds</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>0-59</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * /</code></td>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Minutes</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>0-59</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * /</code></td>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Hours</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>0-23</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * /</code></td>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Day-of-month</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>1-31</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * ? / L W</code></td>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Month</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>0-11 or JAN-DEC</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * /</code></td>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Day-of-Week</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>1-7 or SUN-SAT</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * ? / L #</code></td>\r\n </tr>\r\n <tr>\r\n <td align=\"left\"><code>Year (Optional)</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>empty, 1970-2199</code></td>\r\n <td align=\"left\">&nbsp;</th>\r\n <td align=\"left\"><code>, - * /</code></td>\r\n </tr>\r\n </table>\r\n <P>\r\n The '*' character is used to specify all values. For example, &quot;*&quot;\r\n in the minute field means &quot;every minute&quot;.\r\n <P>\r\n The '?' character is allowed for the day-of-month and day-of-week fields. It\r\n is used to specify 'no specific value'. This is useful when you need to\r\n specify something in one of the two fields, but not the other.\r\n <P>\r\n The '-' character is used to specify ranges For example &quot;10-12&quot; in\r\n the hour field means &quot;the hours 10, 11 and 12&quot;.\r\n <P>\r\n The ',' character is used to specify additional values. For example\r\n &quot;MON,WED,FRI&quot; in the day-of-week field means &quot;the days Monday,\r\n Wednesday, and Friday&quot;.\r\n <P>\r\n The '/' character is used to specify increments. For example &quot;0/15&quot;\r\n in the seconds field means &quot;the seconds 0, 15, 30, and 45&quot;. And\r\n &quot;5/15&quot; in the seconds field means &quot;the seconds 5, 20, 35, and\r\n 50&quot;.  Specifying '*' before the  '/' is equivalent to specifying 0 is\r\n the value to start with. Essentially, for each field in the expression, there\r\n is a set of numbers that can be turned on or off. For seconds and minutes,\r\n the numbers range from 0 to 59. For hours 0 to 23, for days of the month 0 to\r\n 31, and for months 0 to 11 (JAN to DEC). The &quot;/&quot; character simply helps you turn\r\n on every &quot;nth&quot; value in the given set. Thus &quot;7/6&quot; in the\r\n month field only turns on month &quot;7&quot;, it does NOT mean every 6th\r\n month, please note that subtlety.\r\n <P>\r\n The 'L' character is allowed for the day-of-month and day-of-week fields.\r\n This character is short-hand for &quot;last&quot;, but it has different\r\n meaning in each of the two fields. For example, the value &quot;L&quot; in\r\n the day-of-month field means &quot;the last day of the month&quot; - day 31\r\n for January, day 28 for February on non-leap years. If used in the\r\n day-of-week field by itself, it simply means &quot;7&quot; or\r\n &quot;SAT&quot;. But if used in the day-of-week field after another value, it\r\n means &quot;the last xxx day of the month&quot; - for example &quot;6L&quot;\r\n means &quot;the last friday of the month&quot;. You can also specify an offset\r\n from the last day of the month, such as \"L-3\" which would mean the third-to-last\r\n day of the calendar month. <i>When using the 'L' option, it is important not to\r\n specify lists, or ranges of values, as you'll get confusing/unexpected results.</i>\r\n <P>\r\n The 'W' character is allowed for the day-of-month field.  This character\r\n is used to specify the weekday (Monday-Friday) nearest the given day.  As an\r\n example, if you were to specify &quot;15W&quot; as the value for the\r\n day-of-month field, the meaning is: &quot;the nearest weekday to the 15th of\r\n the month&quot;. So if the 15th is a Saturday, the trigger will fire on\r\n Friday the 14th. If the 15th is a Sunday, the trigger will fire on Monday the\r\n 16th. If the 15th is a Tuesday, then it will fire on Tuesday the 15th.\r\n However if you specify &quot;1W&quot; as the value for day-of-month, and the\r\n 1st is a Saturday, the trigger will fire on Monday the 3rd, as it will not\r\n 'jump' over the boundary of a month's days.  The 'W' character can only be\r\n specified when the day-of-month is a single day, not a range or list of days.\r\n <P>\r\n The 'L' and 'W' characters can also be combined for the day-of-month\r\n expression to yield 'LW', which translates to &quot;last weekday of the\r\n month&quot;.\r\n <P>\r\n The '#' character is allowed for the day-of-week field. This character is\r\n used to specify &quot;the nth&quot; XXX day of the month. For example, the\r\n value of &quot;6#3&quot; in the day-of-week field means the third Friday of\r\n the month (day 6 = Friday and &quot;#3&quot; = the 3rd one in the month).\r\n Other examples: &quot;2#1&quot; = the first Monday of the month and\r\n &quot;4#5&quot; = the fifth Wednesday of the month. Note that if you specify\r\n &quot;#5&quot; and there is not 5 of the given day-of-week in the month, then\r\n no firing will occur that month.  If the '#' character is used, there can\r\n only be one expression in the day-of-week field (&quot;3#1,6#3&quot; is\r\n not valid, since there are two expressions).\r\n <P>\r\n <!--The 'C' character is allowed for the day-of-month and day-of-week fields.\r\n This character is short-hand for \"calendar\". This means values are\r\n calculated against the associated calendar, if any. If no calendar is\r\n associated, then it is equivalent to having an all-inclusive calendar. A\r\n value of \"5C\" in the day-of-month field means \"the first day included by the\r\n calendar on or after the 5th\". A value of \"1C\" in the day-of-week field\r\n means \"the first day included by the calendar on or after Sunday\".-->\r\n <P>\r\n The legal characters and the names of months and days of the week are not\r\n case sensitive.\r\n\r\n <p>\r\n <b>NOTES:</b>\r\n <ul>\r\n <li>Support for specifying both a day-of-week and a day-of-month value is\r\n not complete (you'll need to use the '?' character in one of these fields).\r\n </li>\r\n <li>Overflowing ranges is supported - that is, having a larger number on\r\n the left hand side than the right. You might do 22-2 to catch 10 o'clock\r\n at night until 2 o'clock in the morning, or you might have NOV-FEB. It is\r\n very important to note that overuse of overflowing ranges creates ranges\r\n that don't make sense and no effort has been made to determine which\r\n interpretation CronExpression chooses. An example would be\r\n \"0 0 14-6 ? * FRI-MON\". </li>\r\n </ul>\r\n </p>\r\n\r\n @author Sharada Jambula, James House\r\n @author Contributions from Mads Henderson\r\n @author Refactoring from CronTrigger to CronExpression by Aaron Craven\r\n <p>\r\n Borrowed from quartz v2.3.1\r\n","fields":[],"enumConstants":[],"methods":[{"name":"isSatisfiedBy","paramTypes":["java.util.Date"],"doc":"\n Indicates whether the given date satisfies the cron expression. Note that\r\n milliseconds are ignored, so two Dates falling on different milliseconds\r\n of the same second will always have the same result here.\r\n\r\n @param date the date to evaluate\r\n @return a boolean indicating whether the given date satisfies the cron\r\n expression\r\n"},{"name":"getNextValidTimeAfter","paramTypes":["java.util.Date"],"doc":"\n Returns the next date/time <I>after</I> the given date/time which\r\n satisfies the cron expression.\r\n\r\n @param date the date/time at which to begin the search for the next valid\r\n             date/time\r\n @return the next valid date/time\r\n"},{"name":"getNextInvalidTimeAfter","paramTypes":["java.util.Date"],"doc":"\n Returns the next date/time <I>after</I> the given date/time which does\r\n <I>not</I> satisfy the expression\r\n\r\n @param date the date/time at which to begin the search for the next\r\n             invalid date/time\r\n @return the next valid date/time\r\n"},{"name":"getTimeZone","paramTypes":[],"doc":"\n Returns the time zone for which this <code>CronExpression</code>\r\n will be resolved.\r\n"},{"name":"setTimeZone","paramTypes":["java.util.TimeZone"],"doc":"\n Sets the time zone for which  this <code>CronExpression</code>\r\n will be resolved.\r\n"},{"name":"toString","paramTypes":[],"doc":"\n Returns the string representation of the <CODE>CronExpression</CODE>\r\n\r\n @return a string representation of the <CODE>CronExpression</CODE>\r\n"},{"name":"isValidExpression","paramTypes":["java.lang.String"],"doc":"\n Indicates whether the specified cron expression can be parsed into a\r\n valid cron expression\r\n\r\n @param cronExpression the expression to evaluate\r\n @return a boolean indicating whether the given expression is a valid cron\r\n expression\r\n"},{"name":"setCalendarHour","paramTypes":["java.util.Calendar","int"],"doc":"\n Advance the calendar to the particular hour paying particular attention\r\n to daylight saving problems.\r\n\r\n @param cal  the calendar to operate on\r\n @param hour the hour to set\r\n"},{"name":"getTimeBefore","paramTypes":["java.util.Date"],"doc":"\n NOT YET IMPLEMENTED: Returns the time before the given time\r\n that the <code>CronExpression</code> matches.\r\n"},{"name":"getFinalFireTime","paramTypes":[],"doc":"\n NOT YET IMPLEMENTED: Returns the final time that the\r\n <code>CronExpression</code> will match.\r\n"}],"constructors":[{"name":"<init>","paramTypes":["java.lang.String"],"doc":"\n Constructs a new <CODE>CronExpression</CODE> based on the specified\r\n parameter.\r\n\r\n @param cronExpression String representation of the cron expression the\r\n                       new object should represent\r\n @throws ParseException if the string expression cannot be parsed into a valid\r\n                        <CODE>CronExpression</CODE>\r\n"},{"name":"<init>","paramTypes":["com.xxl.job.admin.core.cron.CronExpression"],"doc":"\n Constructs a new {@code CronExpression} as a copy of an existing\r\n instance.\r\n\r\n @param expression The existing cron expression to be copied\r\n"}]}