{"doc":"\n 字符串工具类\r\n\r\n @author Lion Li\r\n","fields":[],"enumConstants":[],"methods":[{"name":"blankToDefault","paramTypes":["java.lang.String","java.lang.String"],"doc":"\n 获取参数不为空值\r\n\r\n @param str defaultValue 要判断的value\r\n @return value 返回值\r\n"},{"name":"isEmpty","paramTypes":["java.lang.String"],"doc":"\n * 判断一个字符串是否为空串\r\n\r\n @param str String\r\n @return true：为空 false：非空\r\n"},{"name":"isNotEmpty","paramTypes":["java.lang.String"],"doc":"\n * 判断一个字符串是否为非空串\r\n\r\n @param str String\r\n @return true：非空串 false：空串\r\n"},{"name":"trim","paramTypes":["java.lang.String"],"doc":"\n 去空格\r\n"},{"name":"substring","paramTypes":["java.lang.String","int"],"doc":"\n 截取字符串\r\n\r\n @param str   字符串\r\n @param start 开始\r\n @return 结果\r\n"},{"name":"substring","paramTypes":["java.lang.String","int","int"],"doc":"\n 截取字符串\r\n\r\n @param str   字符串\r\n @param start 开始\r\n @param end   结束\r\n @return 结果\r\n"},{"name":"format","paramTypes":["java.lang.String","java.lang.Object[]"],"doc":"\n 格式化文本, {} 表示占位符<br>\r\n 此方法只是简单将占位符 {} 按照顺序替换为参数<br>\r\n 如果想输出 {} 使用 \\\\转义 { 即可，如果想输出 {} 之前的 \\ 使用双转义符 \\\\\\\\ 即可<br>\r\n 例：<br>\r\n 通常使用：format(\"this is {} for {}\", \"a\", \"b\") -> this is a for b<br>\r\n 转义{}： format(\"this is \\\\{} for {}\", \"a\", \"b\") -> this is {} for a<br>\r\n 转义\\： format(\"this is \\\\\\\\{} for {}\", \"a\", \"b\") -> this is \\a for b<br>\r\n\r\n @param template 文本模板，被替换的部分用 {} 表示\r\n @param params   参数值\r\n @return 格式化后的文本\r\n"},{"name":"ishttp","paramTypes":["java.lang.String"],"doc":"\n 是否为http(s)://开头\r\n\r\n @param link 链接\r\n @return 结果\r\n"},{"name":"str2Set","paramTypes":["java.lang.String","java.lang.String"],"doc":"\n 字符串转set\r\n\r\n @param str 字符串\r\n @param sep 分隔符\r\n @return set集合\r\n"},{"name":"str2List","paramTypes":["java.lang.String","java.lang.String","boolean","boolean"],"doc":"\n 字符串转list\r\n\r\n @param str         字符串\r\n @param sep         分隔符\r\n @param filterBlank 过滤纯空白\r\n @param trim        去掉首尾空白\r\n @return list集合\r\n"},{"name":"containsAnyIgnoreCase","paramTypes":["java.lang.CharSequence","java.lang.CharSequence[]"],"doc":"\n 查找指定字符串是否包含指定字符串列表中的任意一个字符串同时串忽略大小写\r\n\r\n @param cs                  指定字符串\r\n @param searchCharSequences 需要检查的字符串数组\r\n @return 是否包含任意一个字符串\r\n"},{"name":"toUnderScoreCase","paramTypes":["java.lang.String"],"doc":"\n 驼峰转下划线命名\r\n"},{"name":"inStringIgnoreCase","paramTypes":["java.lang.String","java.lang.String[]"],"doc":"\n 是否包含字符串\r\n\r\n @param str  验证字符串\r\n @param strs 字符串组\r\n @return 包含返回true\r\n"},{"name":"convertToCamelCase","paramTypes":["java.lang.String"],"doc":"\n 将下划线大写方式命名的字符串转换为驼峰式。如果转换前的下划线大写方式命名的字符串为空，则返回空字符串。 例如：HELLO_WORLD->HelloWorld\r\n\r\n @param name 转换前的下划线大写方式命名的字符串\r\n @return 转换后的驼峰式命名的字符串\r\n"},{"name":"toCamelCase","paramTypes":["java.lang.String"],"doc":"\n 驼峰式命名法 例如：user_name->userName\r\n"},{"name":"matches","paramTypes":["java.lang.String","java.util.List"],"doc":"\n 查找指定字符串是否匹配指定字符串列表中的任意一个字符串\r\n\r\n @param str  指定字符串\r\n @param strs 需要检查的字符串数组\r\n @return 是否匹配\r\n"},{"name":"isMatch","paramTypes":["java.lang.String","java.lang.String"],"doc":"\n 判断url是否与规则配置:\r\n ? 表示单个字符;\r\n * 表示一层路径内的任意字符串，不可跨层级;\r\n ** 表示任意层路径;\r\n\r\n @param pattern 匹配规则\r\n @param url     需要匹配的url\r\n"},{"name":"padl","paramTypes":["java.lang.Number","int"],"doc":"\n 数字左边补齐0，使之达到指定长度。注意，如果数字转换为字符串后，长度大于size，则只保留 最后size个字符。\r\n\r\n @param num  数字对象\r\n @param size 字符串指定长度\r\n @return 返回数字的字符串格式，该字符串为指定长度。\r\n"},{"name":"padl","paramTypes":["java.lang.String","int","char"],"doc":"\n 字符串左补齐。如果原始字符串s长度大于size，则只保留最后size个字符。\r\n\r\n @param s    原始字符串\r\n @param size 字符串指定长度\r\n @param c    用于补齐的字符\r\n @return 返回指定长度的字符串，由原字符串左补齐或截取得到。\r\n"},{"name":"splitList","paramTypes":["java.lang.String"],"doc":"\n 切分字符串(分隔符默认逗号)\r\n\r\n @param str 被切分的字符串\r\n @return 分割后的数据列表\r\n"},{"name":"splitList","paramTypes":["java.lang.String","java.lang.String"],"doc":"\n 切分字符串\r\n\r\n @param str       被切分的字符串\r\n @param separator 分隔符\r\n @return 分割后的数据列表\r\n"},{"name":"splitTo","paramTypes":["java.lang.String","java.util.function.Function"],"doc":"\n 切分字符串自定义转换(分隔符默认逗号)\r\n\r\n @param str    被切分的字符串\r\n @param mapper 自定义转换\r\n @return 分割后的数据列表\r\n"},{"name":"splitTo","paramTypes":["java.lang.String","java.lang.String","java.util.function.Function"],"doc":"\n 切分字符串自定义转换\r\n\r\n @param str       被切分的字符串\r\n @param separator 分隔符\r\n @param mapper    自定义转换\r\n @return 分割后的数据列表\r\n"}],"constructors":[]}